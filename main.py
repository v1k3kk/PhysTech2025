# --- Telegram FitTrack Bot ---
# –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∏, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —É–ø—Ä–∞–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å–æ–º –∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏.

# –ò–º–ø–æ—Ä—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –±–∏–±–ª–∏–æ—Ç–µ–∫
import json
from apscheduler.schedulers.background import BackgroundScheduler
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import Application, CommandHandler, ContextTypes, MessageHandler, filters, CallbackQueryHandler
import re
from datetime import datetime
import asyncio

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞ 
TOKEN = "api"

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = BackgroundScheduler()
scheduler.start()

# –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑/–≤ JSON —Ñ–∞–π–ª
def load_user_data():
    try:
        with open(DATA_FILE, "r", encoding="utf-8") as f:
            return json.load(f)
    except:
        return {}

def save_user_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

DATA_FILE = "user_data.json"

# –ì–ª–æ–±–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
user_data_store = load_user_data()

# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É –∏ –≥–ª–∞–≤–Ω–æ–º—É event loop
bot_instance = None  

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (reply –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
def get_main_menu_keyboard():
    keyboard = [
        [KeyboardButton("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), KeyboardButton("üß† –ü—Ä–æ–≥—Ä–µ—Å—Å")],
        [KeyboardButton("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), KeyboardButton("üçΩ –ü–∏—Ç–∞–Ω–∏–µ")],
        [KeyboardButton("üéØ –ú–æ—è —Ü–µ–ª—å"), KeyboardButton("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
    ]
    return ReplyKeyboardMarkup(keyboard, resize_keyboard=True)

# –ö–æ–º–∞–Ω–¥–∞ /start ‚Äî –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ñ–∏–ª—è –∏ –º–µ–Ω—é
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in user_data_store:
        user_data_store[user_id] = {"reminders": [], "workouts": [], "timezone": 0}
        save_user_data(user_data_store)
    await update.message.reply_text(
        "üèÅ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ FitTrack!\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ:",
        reply_markup=get_main_menu_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞" ‚Äî –∑–∞–ø–∏—Å—å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –∏—Å—Ç–æ—Ä–∏—é
async def handle_workout(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    workout_text = "üèãÔ∏è‚Äç‚ôÇÔ∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫—É. –ß—Ç–æ –±—É–¥–µ–º –∫–∞—á–∞—Ç—å —Å–µ–≥–æ–¥–Ω—è?"
    user_data_store.setdefault(user_id, {"reminders": [], "workouts": [], "timezone": 0})
    user_data_store[user_id]["workouts"].append({"date": datetime.now().isoformat(), "note": "–í—ã–±—Ä–∞–Ω–∞ —Ç—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"})
    save_user_data(user_data_store)
    await update.message.reply_text(workout_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≥—Ä–µ—Å—Å"
async def handle_progress(update: Update, context: ContextTypes.DEFAULT_TYPE):
    progress_text = "üìä –í–æ—Ç –≤–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!"
    await update.message.reply_text(progress_text)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" ‚Äî –ø–æ–∫–∞–∑ –º–µ–Ω—é —Å inline-–∫–Ω–æ–ø–∫–∞–º–∏
async def handle_reminders(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è", callback_data="reminder_time_select")],
        [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫", callback_data="reminder_list")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("‚è∞ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏:", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ü–∏—Ç–∞–Ω–∏–µ"
async def handle_nutrition(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üçΩ –í–æ—Ç –≤–∞—à –ø–ª–∞–Ω –ø–∏—Ç–∞–Ω–∏—è –Ω–∞ —Å–µ–≥–æ–¥–Ω—è.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ú–æ—è —Ü–µ–ª—å"
async def handle_goal(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("üéØ –í—ã–±–µ—Ä–∏—Ç–µ —Ü–µ–ª—å: –ø–æ—Ö—É–¥–µ–Ω–∏–µ, –Ω–∞–±–æ—Ä –º–∞—Å—Å—ã –∏–ª–∏ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ —Ñ–æ—Ä–º—ã.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–∫–∏ "–ù–∞—Å—Ç—Ä–æ–π–∫–∏"
async def handle_settings(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è. –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–±—Ä–æ—Å–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –∏–ª–∏ –ø–æ–º–µ–Ω—è—Ç—å —è–∑—ã–∫.")

# –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ APScheduler)
def send_reminder(reminder_context):
    chat_id = reminder_context["chat_id"]
    import asyncio
    global main_loop, bot_instance
    if main_loop and not main_loop.is_closed():
        main_loop.call_soon_threadsafe(
            asyncio.create_task,
            bot_instance.send_message(chat_id=chat_id, text="–ü—Ä–∏–≤–µ—Ç. –¢—ã –ø—Ä–æ—Å–∏–ª —Ç–µ–±–µ –Ω–∞–ø–æ–º–Ω–∏—Ç—å –æ —á–µ–º-—Ç–æ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ–º!")
        )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ inline-–∫–Ω–æ–ø–æ–∫ (—É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–∏, –ø—Ä–æ—Å–º–æ—Ç—Ä/—É–¥–∞–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π)
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = str(query.from_user.id)
    if user_id not in user_data_store:
        user_data_store[user_id] = {"reminders": [], "workouts": [], "timezone": 0}
        save_user_data(user_data_store)
    if query.data == "reminder_time_select":
        await query.edit_message_text("üïí –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ HH:MM –∏–ª–∏ –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ DD.MM HH:MM")
        context.user_data["awaiting_reminder_time"] = True
    elif query.data == "reminder_list":
        reminders = user_data_store[user_id].get("reminders", [])
        if not reminders:
            await query.edit_message_text("üîï –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π.")
        else:
            message = "üìã –í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:\n"
            keyboard = []
            for i, rem in enumerate(reminders):
                if rem["type"] == "daily":
                    label = f"{i+1}) –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {rem['hour']:02d}:{rem['minute']:02d}"
                else:
                    label = f"{i+1}) –û–¥–∏–Ω —Ä–∞–∑: {rem['datetime']}"
                message += f"{label}\n"
                keyboard.append([InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {i+1}", callback_data=f"reminder_delete_{i}")])
            markup = InlineKeyboardMarkup(keyboard)
            await query.edit_message_text(message, reply_markup=markup)
    elif query.data.startswith("reminder_delete_"):
        index = int(query.data.split("_")[-1])
        reminders = user_data_store[user_id].get("reminders", [])
        if 0 <= index < len(reminders):
            rem = reminders.pop(index)
            save_user_data(user_data_store)
            try:
                scheduler.remove_job(rem.get("job_id"))
            except Exception:
                pass
            await query.edit_message_text("üóë –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.edit_message_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ –≤–≤–æ–¥–∞ –≤—Ä–µ–º–µ–Ω–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def handle_time_input(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if context.user_data.get("awaiting_reminder_time"):
        text = update.message.text.strip()
        date_match = re.match(r"^(\d{1,2})\.(\d{1,2})\s+(\d{1,2}):(\d{2})$", text)
        time_match = re.match(r"^([01]?\d|2[0-3]):([0-5]\d)$", text)
        user_id = str(update.effective_user.id)
        tz = user_data_store.get(user_id, {}).get("timezone", 0)

        if user_id not in user_data_store:
            user_data_store[user_id] = {"reminders": [], "workouts": [], "timezone": tz}
            save_user_data(user_data_store)

        if date_match:
            day, month, hour, minute = map(int, date_match.groups())
            now = datetime.now()
            run_date = datetime(year=now.year, month=month, day=day, hour=hour, minute=minute)
            run_date = run_date.replace(hour=(run_date.hour - tz) % 24)
            context.user_data["pending_reminder"] = ("once", run_date)
            await update.message.reply_text(f"‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –æ–¥–Ω–æ—Ä–∞–∑–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {run_date.strftime('%d.%m %H:%M')}? (–î–∞/–ù–µ—Ç)")
        elif time_match:
            hour, minute = map(int, time_match.groups())
            hour = (hour - tz) % 24
            context.user_data["pending_reminder"] = ("daily", (hour, minute))
            await update.message.reply_text(f"‚ùì –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ {hour:02d}:{minute:02d}? (–î–∞/–ù–µ—Ç)")
        else:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π HH:MM –∏–ª–∏ DD.MM HH:MM")
        context.user_data["awaiting_reminder_time"] = False

# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è (–î–∞ / –ù–µ—Ç)
async def handle_confirmation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if update.message.text.lower() == "–¥–∞" and "pending_reminder" in context.user_data:
        chat_id = update.effective_chat.id
        kind, value = context.user_data.pop("pending_reminder")
        if user_id not in user_data_store:
            user_data_store[user_id] = {"reminders": [], "workouts": [], "timezone": 0}
        if kind == "once":
            job = scheduler.add_job(send_reminder, 'date', run_date=value, args=[{"chat_id": chat_id}], id=f"reminder_once_{chat_id}_{value.timestamp()}")
            user_data_store[user_id]["reminders"].append({"type": "once", "datetime": value.strftime('%Y-%m-%d %H:%M:%S'), "job_id": job.id})
        else:
            hour, minute = value
            job = scheduler.add_job(send_reminder, 'cron', hour=hour, minute=minute, args=[{"chat_id": chat_id}], id=f"reminder_{chat_id}_{hour}_{minute}")
            user_data_store[user_id]["reminders"].append({"type": "daily", "hour": hour, "minute": minute, "job_id": job.id})
        save_user_data(user_data_store)
        await update.message.reply_text("‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.")
    elif update.message.text.lower() == "–Ω–µ—Ç":
        context.user_data.pop("pending_reminder", None)
        await update.message.reply_text("‚ùå –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)
async def handle_timezone(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip().lower()
    match = re.match(r"^tz\s*([+-]?\d{1,2})$", text)
    user_id = str(update.effective_user.id)
    if match:
        offset = int(match.group(1))
        if user_id not in user_data_store:
            user_data_store[user_id] = {"reminders": [], "workouts": [], "timezone": 0}
        user_data_store[user_id]["timezone"] = offset
        save_user_data(user_data_store)
        await update.message.reply_text(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: GMT{offset:+}")

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º (–∫–æ–º–∞–Ω–¥–æ–π –∏–ª–∏ —Ç–µ–∫—Å—Ç–æ–º)
async def handle_timezone_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if context.args:
        try:
            offset = int(context.args[0])
            if user_id not in user_data_store:
                user_data_store[user_id] = {"reminders": [], "workouts": [], "timezone": 0}
            user_data_store[user_id]["timezone"] = offset
            save_user_data(user_data_store)
            await update.message.reply_text(f"üåç –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: GMT{offset:+}")
        except:
            await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ò—Å–ø–æ–ª—å–∑—É–π /tz +2 –∏–ª–∏ /tz -3")
    else:
        await update.message.reply_text("üìå –í–≤–µ–¥–∏—Ç–µ —Å–º–µ—â–µ–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: /tz +2")

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def run_bot():
    global bot_instance, main_loop
    app = Application.builder().token(TOKEN).build()
    bot_instance = app.bot
    main_loop = asyncio.get_event_loop()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("tz", handle_timezone_command))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üèãÔ∏è‚Äç‚ôÇÔ∏è –¢—Ä–µ–Ω–∏—Ä–æ–≤–∫–∞"), handle_workout))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üß† –ü—Ä–æ–≥—Ä–µ—Å—Å"), handle_progress))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è"), handle_reminders))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üçΩ –ü–∏—Ç–∞–Ω–∏–µ"), handle_nutrition))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("üéØ –ú–æ—è —Ü–µ–ª—å"), handle_goal))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"), handle_settings))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^tz\s*[+-]?\d{1,2}$"), handle_timezone))
    app.add_handler(MessageHandler(filters.TEXT & filters.Regex(r"^(–¥–∞|–Ω–µ—Ç)$"), handle_confirmation))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_time_input))
    app.add_handler(CallbackQueryHandler(handle_callback))
    print("‚úÖ Bot started")
    app.run_polling()

# –ó–∞–ø—É—Å–∫ main —Ñ—É–Ω–∫—Ü–∏–∏
if __name__ == "__main__":
    run_bot()